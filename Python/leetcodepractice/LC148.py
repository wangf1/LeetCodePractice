# https://leetcode.com/problems/sort-list/
from operator import attrgetter
from typing import Optional

from leetcodepractice.data_structure_elements import ListNode
from leetcodepractice.test.LCTestUtils import build_node_list, verify_node_list


class Solution:
    # implement merge sort by myself
    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head
        parts = self.split(head)
        if not parts[1]:
            return parts[0]
        merged = self.merge(self.sortList(parts[0]), self.sortList(parts[1]))
        return merged

    @staticmethod
    def split(head: Optional[ListNode]) -> tuple[ListNode, ListNode]:
        fast = head
        slow = head
        pre_slow = None
        while fast and fast.next:
            pre_slow = slow
            fast = fast.next.next
            slow = slow.next
        part2 = slow
        pre_slow.next = None
        return head, part2

    @staticmethod
    def merge(part1: Optional[ListNode], part2: Optional[ListNode]):
        if not part1:
            return part2
        if not part2:
            return part1
        dummy = ListNode(0, None)
        tail = dummy
        left = part1
        right = part2
        while left and right:
            if left.val < right.val:
                tail.next = left
                tail = tail.next
                left = left.next
            else:
                tail.next = right
                tail = tail.next
                right = right.next
        if left:
            tail.next = left
        if right:
            tail.next = right
        return dummy.next

    # Use Python build in sort, time complexity is O(nlogn), but space complexity is O(n)
    def sortList2(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head
        nodes = []
        while head:
            nodes.append(head)
            head = head.next
        nodes.sort(key=attrgetter('val'))

        for i in range(len(nodes) - 1):
            nodes[i].next = nodes[i + 1]
        nodes[-1].next = None
        return nodes[0]


if __name__ == '__main__':
    head = build_node_list([4, 2, 1, 3])
    result = Solution().sortList(head)
    verify_node_list([1, 2, 3, 4], result)

    head = build_node_list([4, 19, 14, 5, -3, 1, 8, 5, 11, 15])
    result = Solution().sortList(head)
    verify_node_list([-3, 1, 4, 5, 5, 8, 11, 14, 15, 19], result)

    head = build_node_list(
        [303, -737, -595, -292, -813, -289, 784, -487, -490, 254, -482, -981, -444, 5, 383, 332, -156, -798, 445, 632,
         -317, 484, -473, 765, -152, 524, 864, 703, -881, -659, 468, 644, -736, -170, -349, -765, 705, 242, 512, -608,
         777, 58, -730, 411, 853, 741, -296, 899, -127, -266, -821, 848, -514, -817, -987, -378, 450, -502, -586, 626,
         -605, -429, 161, -937, -428, 285, -999, 886, -283, -298, -845, 519, -231, 98, -877, -299, -929, 667, -551, 686,
         -843, 90, -253, 284, 855, -809, -186, -376, 266, -205, 64, 789, 891, -167, -574, -516, 701, 677, -925, 801,
         -54, -893, 229, -409, 708, 87, -467, 289, 393, 900, -227, 133, -117, -392, 277, -670, -249, 967, 845, -423,
         968, -722, -273, 623, -969, 329, -970, 885, -194, -44, 215, 449, 294, 189, 243, -222, -149, 41, 972, 824, -207,
         -302, 693, -390, 794, 487, -653, 648, -362, 182, -693, 309, 805, 612, -784, -259, 485, 183, 43, -210, -899,
         -905, 909, -108, -713, -862, -619, -287, -343, 11, 204, 695, -131, -233, -190, 687, -27, -992, 338, 938, -252,
         -769, -761, 961, 317, -536, 654, 331, 261, 884, -865, 857, 913, 852, 225, 306, -53, 797, -961, 330, -565, 752,
         409, -721, 255, -87, -427, 202, 207, -757, -326, 587, -967, 346, -369, 786, 156, 224, 412, -632, -541, -306,
         -412, 917, -979, -331, 15, -315, 930, -220, -669, -985, -144, -810, 145, -888, -732, 502, 949, -739, -830, 359,
         915, 416, -342, -889, -517, 840, -457, 914, 997, -942, -859, 990, -459, -277, 315, 408, -403, -582, -269, 527,
         230, 980, 832, 872, 452, 236, -187, -193, 582, 706, -657, 847, -80, 574, 630, 353, 790, -801, -245, 986, -994,
         -235, 253, -290, 646, 940, 835, 270, -944, -941, -340, -381, -612, -256, -322, 61, -646, -766, 639, -42, 193,
         240, -141, 214, -949, 191, 543, 774, 129, -936, -633, -399, 299, -816, -691, -8, 75, 185, 670, -686, 948, -4,
         472, -86, -199, -755, 919, 124, 893, 352, -868, 992, -387, -607, 629, 860, -704, -52, 76, -324, -462, -723,
         -159, 180, -431, 748, 446, -75, 486, 694, -554, 313, 844, -860, 431, 245, -61, 858, 982, 517, 692, 558, -338,
         -1000, -943, 132, 394, 48, -386, -782, 573, 385, 292, 719, 417, 806, 143, 711, 440, 783, -39, -864, -587, -272,
         235, 663, -630, -400, -892, -38, -223, -498, 912, -700, -569, 759, 679, -604, 818, 827, -248, -37, 49, 529,
         -65, 862, 355, 956, 551, -564, -972, -842, -542, -519, 911, 244, 74, 902, 963, 924, -515, -384, -771, -820,
         -203, 57, -396, 436, 700, 518, -775, -611, 683, -743, -998, 763, 392, -764, 966, -347, -959, 957, 575, -354,
         -438, 368, 23, 816, -780, 337, -790, 591, -900, 593, 201, 769, -926, -213, -333, -122, 717, -521, 168, 834,
         988, -831, -752, -931, 578, -684, -313, -731, 357, -727, 310, 560, -217, -786, 707, 127, 571, 496, -923, -9,
         83, -886, -475, -851, -754, 973, -729, -759, -443, 339, -902, 295, 328, 889, 681, -503, 528, 223, 477, 553,
         -97, -466, 883, -549, 978, -511, 733, 691, 861, 311, 760, 494, -772, 283, -920, 499, -966, 19, 62, -111, 86,
         955, -708, 391, -768, 232, -31, 21, 47, -23, 880, -853, 410, 721, 568, -716, 804, 709, -494, -93, 916, -841,
         602, -583, 577, -885, 246, -591, 739, -5, -73, 115, -244, -382, 186, -681, 114, -758, 826, -585, -406, 437,
         -19, 653, 154, -613, 479, 70, -793, -46, 910, -950, 678, 420, -254, 965, 147, -965, -307, -78, 728, 461, -714,
         -828, 829, -143, 549, 210, 179, -136, 779, 825, 925, -21, 822, 276, 249, -749, 636, 169, -871, -834, -508,
         -529, -639, 176, 40, -103, 888, 690, -806, 293, -385, 149, -288, -480, 439, 792, 619, 206, -665, -357, -558,
         -550, 928, -807, -484, 934, -507, -648, -110, -904, -836, 851, 541, -408, -294, 987, 290, -291, 444, 506, -151,
         327, -747, -146, -499, 675, 42, 211, 31, 881, -518, 218, 10, 689, 610, -328, 425, -557, 536, -332, 580, -876,
         397, 137, 563, 151, 406, -234, -211, 35, -373, 747, -10, -208, 1000, 922, 781, 906, 674, 661, -567, -773, 364,
         478, 140, -202, -531, -246, -993, -912, 567, -255, -107, -489, 463, -309, 197, 72, -130, -224, 513, -82, 877,
         -452, 319, -436, 770, -125, -355, -414, -442, 274, 361, 975, -113, -25, -282, -64, 875, -652, 51, 581, 6, 616,
         -651, -154, 453, -756, -36, 320, 839])
    result = Solution().sortList(head)
    verify_node_list(
        [-1000, -999, -998, -994, -993, -992, -987, -985, -981, -979, -972, -970, -969, -967, -966, -965, -961, -959,
         -950, -949, -944, -943, -942, -941, -937, -936, -931, -929, -926, -925, -923, -920, -912, -905, -904, -902,
         -900, -899, -893, -892, -889, -888, -886, -885, -881, -877, -876, -871, -868, -865, -864, -862, -860, -859,
         -853, -851, -845, -843, -842, -841, -836, -834, -831, -830, -828, -821, -820, -817, -816, -813, -810, -809,
         -807, -806, -801, -798, -793, -790, -786, -784, -782, -780, -775, -773, -772, -771, -769, -768, -766, -765,
         -764, -761, -759, -758, -757, -756, -755, -754, -752, -749, -747, -743, -739, -737, -736, -732, -731, -730,
         -729, -727, -723, -722, -721, -716, -714, -713, -708, -704, -700, -693, -691, -686, -684, -681, -670, -669,
         -665, -659, -657, -653, -652, -651, -648, -646, -639, -633, -632, -630, -619, -613, -612, -611, -608, -607,
         -605, -604, -595, -591, -587, -586, -585, -583, -582, -574, -569, -567, -565, -564, -558, -557, -554, -551,
         -550, -549, -542, -541, -536, -531, -529, -521, -519, -518, -517, -516, -515, -514, -511, -508, -507, -503,
         -502, -499, -498, -494, -490, -489, -487, -484, -482, -480, -475, -473, -467, -466, -462, -459, -457, -452,
         -444, -443, -442, -438, -436, -431, -429, -428, -427, -423, -414, -412, -409, -408, -406, -403, -400, -399,
         -396, -392, -390, -387, -386, -385, -384, -382, -381, -378, -376, -373, -369, -362, -357, -355, -354, -349,
         -347, -343, -342, -340, -338, -333, -332, -331, -328, -326, -324, -322, -317, -315, -313, -309, -307, -306,
         -302, -299, -298, -296, -294, -292, -291, -290, -289, -288, -287, -283, -282, -277, -273, -272, -269, -266,
         -259, -256, -255, -254, -253, -252, -249, -248, -246, -245, -244, -235, -234, -233, -231, -227, -224, -223,
         -222, -220, -217, -213, -211, -210, -208, -207, -205, -203, -202, -199, -194, -193, -190, -187, -186, -170,
         -167, -159, -156, -154, -152, -151, -149, -146, -144, -143, -141, -136, -131, -130, -127, -125, -122, -117,
         -113, -111, -110, -108, -107, -103, -97, -93, -87, -86, -82, -80, -78, -75, -73, -65, -64, -61, -54, -53, -52,
         -46, -44, -42, -39, -38, -37, -36, -31, -27, -25, -23, -21, -19, -10, -9, -8, -5, -4, 5, 6, 10, 11, 15, 19, 21,
         23, 31, 35, 40, 41, 42, 43, 47, 48, 49, 51, 57, 58, 61, 62, 64, 70, 72, 74, 75, 76, 83, 86, 87, 90, 98, 114,
         115, 124, 127, 129, 132, 133, 137, 140, 143, 145, 147, 149, 151, 154, 156, 161, 168, 169, 176, 179, 180, 182,
         183, 185, 186, 189, 191, 193, 197, 201, 202, 204, 206, 207, 210, 211, 214, 215, 218, 223, 224, 225, 229, 230,
         232, 235, 236, 240, 242, 243, 244, 245, 246, 249, 253, 254, 255, 261, 266, 270, 274, 276, 277, 283, 284, 285,
         289, 290, 292, 293, 294, 295, 299, 303, 306, 309, 310, 311, 313, 315, 317, 319, 320, 327, 328, 329, 330, 331,
         332, 337, 338, 339, 346, 352, 353, 355, 357, 359, 361, 364, 368, 383, 385, 391, 392, 393, 394, 397, 406, 408,
         409, 410, 411, 412, 416, 417, 420, 425, 431, 436, 437, 439, 440, 444, 445, 446, 449, 450, 452, 453, 461, 463,
         468, 472, 477, 478, 479, 484, 485, 486, 487, 494, 496, 499, 502, 506, 512, 513, 517, 518, 519, 524, 527, 528,
         529, 536, 541, 543, 549, 551, 553, 558, 560, 563, 567, 568, 571, 573, 574, 575, 577, 578, 580, 581, 582, 587,
         591, 593, 602, 610, 612, 616, 619, 623, 626, 629, 630, 632, 636, 639, 644, 646, 648, 653, 654, 661, 663, 667,
         670, 674, 675, 677, 678, 679, 681, 683, 686, 687, 689, 690, 691, 692, 693, 694, 695, 700, 701, 703, 705, 706,
         707, 708, 709, 711, 717, 719, 721, 728, 733, 739, 741, 747, 748, 752, 759, 760, 763, 765, 769, 770, 774, 777,
         779, 781, 783, 784, 786, 789, 790, 792, 794, 797, 801, 804, 805, 806, 816, 818, 822, 824, 825, 826, 827, 829,
         832, 834, 835, 839, 840, 844, 845, 847, 848, 851, 852, 853, 855, 857, 858, 860, 861, 862, 864, 872, 875, 877,
         880, 881, 883, 884, 885, 886, 888, 889, 891, 893, 899, 900, 902, 906, 909, 910, 911, 912, 913, 914, 915, 916,
         917, 919, 922, 924, 925, 928, 930, 934, 938, 940, 948, 949, 955, 956, 957, 961, 963, 965, 966, 967, 968, 972,
         973, 975, 978, 980, 982, 986, 987, 988, 990, 992, 997, 1000], result)
